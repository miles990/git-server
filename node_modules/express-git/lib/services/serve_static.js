// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, SERVE_BLOB_DEFAULTS, assign, git, mime;

  assign = require("../helpers").assign;

  mime = require("mime-types");

  git = require("../ezgit");

  Promise = require("bluebird");

  SERVE_BLOB_DEFAULTS = {
    max_age: 365 * 24 * 60 * 60
  };

  module.exports = function(app, options) {
    var NonHttpError, NotFoundError, ref1;
    ref1 = app.errors, NotFoundError = ref1.NotFoundError, NonHttpError = ref1.NonHttpError;
    options = assign({}, SERVE_BLOB_DEFAULTS, options);
    app.get("/:git_repo(.*).git/:git_ref(.*)?/:git_service(tree)/:path(.*)", function(req, res, next) {
      var cleanup, path, ref, ref2, repo;
      ref2 = req.git, cleanup = ref2.cleanup, repo = ref2.repo, ref = ref2.ref;
      path = req.params.path;
      return Promise.resolve(ref ? repo.getCommit(ref.target()) : repo.getHeadCommit()).then(cleanup).then(function(commit) {
        return Promise.resolve(commit.getEntry(path));
      }).then(cleanup).then(function(entry) {
        if (!entry.isTree()) {
          throw new NotFoundError("Tree not found");
        }
        return Promise.resolve(entry.getTree());
      }).then(cleanup).then(function(tree) {
        var id;
        id = "" + (tree.id());
        if (id === req.headers['if-none-match']) {
          res.status(304);
          return res.end();
        } else {
          res.set({
            "Etag": id,
            "Cache-Control": "private, max-age=" + options.max_age + ", no-transform, must-revalidate"
          });
          return res.json(tree);
        }
      })["catch"](NonHttpError, function(err) {
        throw new NotFoundError(err.message);
      })["catch"](next);
    });
    return app.get("/:git_repo(.*).git/:git_ref(.*)?/:git_service(blob)/:path(.*)", function(req, res, next) {
      var cleanup, path, ref, ref2, repo;
      ref2 = req.git, cleanup = ref2.cleanup, repo = ref2.repo, ref = ref2.ref;
      path = req.params.path;
      return Promise.resolve(ref ? repo.getCommit(ref.target()) : repo.getHeadCommit()).then(cleanup).then(function(commit) {
        return Promise.resolve(commit.getEntry(path));
      }).then(cleanup).then(function(entry) {
        if (!entry.isBlob()) {
          throw new NotFoundError("Blob not found");
        }
        return Promise.resolve(entry.getBlob());
      }).then(cleanup).then(function(blob) {
        var id;
        id = "" + (blob.id());
        if (id === req.headers['if-none-match']) {
          res.status(304);
          return res.end();
        } else {
          res.set({
            "Etag": id,
            "Cache-Control": "private, max-age=" + options.max_age + ", no-transform, must-revalidate",
            "Content-Type": mime.lookup(path) || "application/octet-stream",
            "Content-Length": blob.rawsize()
          });
          res.write(blob.content());
          return res.end();
        }
      })["catch"](NonHttpError, function(err) {
        throw new NotFoundError(err.message);
      })["catch"](next);
    });
  };

}).call(this);

//# sourceMappingURL=serve_static.js.map
